{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TRABAJO PRACTICO INTEGRADOR"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Suban este notebook resuelto al drive con la nomenclatura nombre_apellido_TP_8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "****"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CONSIGNA\n",
    "\n",
    "En base al dataset seguro_medico.csv, vamos a tener que limpiar los datos, hacer algunos ploteos y entrenar un modelo de regresion lineal para poder predecir el costo del seguro medico en base a los datos disponibles en nuestro dataframe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Descripcion del dataset\n",
    "\n",
    "* age = Edad del asegurado\n",
    "\n",
    "* sex = Genero\n",
    "\n",
    "* bmi = Indice de masa corporal\n",
    "\n",
    "* children = Cantidad de hijos\n",
    "\n",
    "* smoker = Indicador si fuma o no\n",
    "\n",
    "* region = region donde vive el asegurado\n",
    "\n",
    "* lives = si esta vivo o no \n",
    "\n",
    "* charges = precio del seguro"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Importamos las librerias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cargamos el dataframe\n",
    "\n",
    "Cargamos el df, observamos la info que tiene, las columnas, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1350 entries, 0 to 1349\n",
      "Data columns (total 8 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   age       1338 non-null   float64\n",
      " 1   sex       1338 non-null   object \n",
      " 2   bmi       1338 non-null   float64\n",
      " 3   children  1338 non-null   float64\n",
      " 4   smoker    1338 non-null   object \n",
      " 5   region    1338 non-null   object \n",
      " 6   lives     1338 non-null   object \n",
      " 7   charges   1338 non-null   float64\n",
      "dtypes: float64(4), object(4)\n",
      "memory usage: 63.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df=pd.read_csv(\"seguro_medico.csv\")\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.head of         age     sex     bmi  children smoker     region lives      charges\n",
       "0      19.0  female  27.900       0.0    yes  southwest   yes  16884.92400\n",
       "1      18.0    male  33.770       1.0     no  southeast   yes   1725.55230\n",
       "2      28.0    male  33.000       3.0     no  southeast   yes   4449.46200\n",
       "3      33.0    male  22.705       0.0     no  northwest   yes  21984.47061\n",
       "4     320.0    male  28.880       0.0     no  northwest   yes   3866.85520\n",
       "...     ...     ...     ...       ...    ...        ...   ...          ...\n",
       "1345    NaN     NaN     NaN       NaN    NaN        NaN   NaN          NaN\n",
       "1346    NaN     NaN     NaN       NaN    NaN        NaN   NaN          NaN\n",
       "1347    NaN     NaN     NaN       NaN    NaN        NaN   NaN          NaN\n",
       "1348    NaN     NaN     NaN       NaN    NaN        NaN   NaN          NaN\n",
       "1349    NaN     NaN     NaN       NaN    NaN        NaN   NaN          NaN\n",
       "\n",
       "[1350 rows x 8 columns]>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         12\n",
       "sex         12\n",
       "bmi         12\n",
       "children    12\n",
       "smoker      12\n",
       "region      12\n",
       "lives       12\n",
       "charges     12\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#al observar una cantidad importante de NaN al final de nuestro df, pido info sobre ese recorte. En cada columna, tenemos 12 NaN\n",
    "# Si la tabla tiene una regularidad, como parece, podemos ver las Ãºltimas 12 filas...\n",
    "\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>lives</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>61.0</td>\n",
       "      <td>female</td>\n",
       "      <td>29.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>yes</td>\n",
       "      <td>northwest</td>\n",
       "      <td>yes</td>\n",
       "      <td>29141.3603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1341</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1342</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1343</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1344</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1345</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1346</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1347</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1348</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1349</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       age     sex    bmi  children smoker     region lives     charges\n",
       "1337  61.0  female  29.07       0.0    yes  northwest   yes  29141.3603\n",
       "1338   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1339   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1340   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1341   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1342   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1343   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1344   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1345   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1346   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1347   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1348   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN\n",
       "1349   NaN     NaN    NaN       NaN    NaN        NaN   NaN         NaN"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Correcto! :) Son las Ãºltimas 12 filas las que son todas Nan.\n",
    "\n",
    "df.tail(13)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Limpiamos el dataframe\n",
    "\n",
    "* El dataframe contiene valores nulos?, que hacemos con ellos?\n",
    "Obviamente si toda una fila tiene valores nulos vamos a tener que eliminarla completamente\n",
    "\n",
    "* En la columna edades hubo errores de tipeo y se multiplicaron por 10 algunas edades, hacer un grafico de cajas para ver lo mencionado. *Luego vamos a modificar estos datos, por el momento solo visualizar*.\n",
    "\n",
    "* Veamos si los valores de las distintas columnas tienen sentido, podemos hacer alguna modificacion?\n",
    "**Pista**: usar value_counts en las columnas sex y smoker\n",
    "\n",
    "* Una vez limpios los datos y eliminadas las filas reseteamos el indice (df.reset_index(drop=True))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         0\n",
       "sex         0\n",
       "bmi         0\n",
       "children    0\n",
       "smoker      0\n",
       "region      0\n",
       "lives       0\n",
       "charges     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#genial! no tenemos mÃ¡s NaNs\n",
    "\n",
    "df=df.iloc[:1338]\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x9e0b538>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x2808 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#hacemos el grÃ¡fico de cajas, para ver los data points con alta desviaciÃ³n de la media (amplificadores de varianza)\n",
    "\n",
    "plt.figure(figsize=(5, 39))\n",
    "sns.boxplot(x=\"age\",data=df,orient=\"v\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\urkni\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3990: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "<ipython-input-9-beaf2d94bbbe>:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df[\"sex\"]=sex\n",
      "<ipython-input-9-beaf2d94bbbe>:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df[\"smoker\"]=smoker\n"
     ]
    }
   ],
   "source": [
    "# modificamos cada columna por fuera del df, luego dropeamos esas columnas e ingresamos las modificadas\n",
    "\n",
    "sex=df.loc[:,\"sex\"].copy()\n",
    "sex=sex.str.title()\n",
    "smoker=df.loc[:,\"smoker\"].copy()\n",
    "smoker[smoker==\"si\"]=\"yes\"\n",
    "df.drop(labels=[\"sex\",\"smoker\"], axis=1, inplace=True)\n",
    "df[\"sex\"]=sex\n",
    "df[\"smoker\"]=smoker\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-10-82c620dd4d9c>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df.sort_values(by=[\"bmi\"], inplace=True)\n"
     ]
    }
   ],
   "source": [
    "df.sort_values(by=[\"bmi\"], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>region</th>\n",
       "      <th>lives</th>\n",
       "      <th>charges</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18.0</td>\n",
       "      <td>15.960</td>\n",
       "      <td>0.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>1694.79640</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21.0</td>\n",
       "      <td>16.815</td>\n",
       "      <td>1.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>3167.45585</td>\n",
       "      <td>Female</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>16.815</td>\n",
       "      <td>2.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>6640.54485</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26.0</td>\n",
       "      <td>17.195</td>\n",
       "      <td>2.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>Female</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28.0</td>\n",
       "      <td>17.290</td>\n",
       "      <td>0.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>3732.62510</td>\n",
       "      <td>Female</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>46.0</td>\n",
       "      <td>48.070</td>\n",
       "      <td>2.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>9432.92530</td>\n",
       "      <td>Female</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>58.0</td>\n",
       "      <td>49.060</td>\n",
       "      <td>0.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>11381.32540</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>23.0</td>\n",
       "      <td>50.380</td>\n",
       "      <td>1.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>2438.05520</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>22.0</td>\n",
       "      <td>52.580</td>\n",
       "      <td>1.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>44501.39820</td>\n",
       "      <td>Male</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>18.0</td>\n",
       "      <td>53.130</td>\n",
       "      <td>0.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>yes</td>\n",
       "      <td>1163.46270</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows Ã 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age     bmi  children     region lives      charges     sex smoker\n",
       "0     18.0  15.960       0.0  northeast   yes   1694.79640    Male     no\n",
       "1     21.0  16.815       1.0  northeast   yes   3167.45585  Female     no\n",
       "2     38.0  16.815       2.0  northeast   yes   6640.54485    Male     no\n",
       "3     26.0  17.195       2.0  northeast   yes  14455.64405  Female    yes\n",
       "4     28.0  17.290       0.0  northeast   yes   3732.62510  Female     no\n",
       "...    ...     ...       ...        ...   ...          ...     ...    ...\n",
       "1333  46.0  48.070       2.0  northeast   yes   9432.92530  Female     no\n",
       "1334  58.0  49.060       0.0  southeast   yes  11381.32540    Male     no\n",
       "1335  23.0  50.380       1.0  southeast   yes   2438.05520    Male     no\n",
       "1336  22.0  52.580       1.0  southeast   yes  44501.39820    Male    yes\n",
       "1337  18.0  53.130       0.0  southeast   yes   1163.46270    Male     no\n",
       "\n",
       "[1338 rows x 8 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Presencia de outliers\n",
    "\n",
    "Veamos el caso de la columna age, hay valores que no tienen sentido (son muy grandes para una persona), a esos valores vamos a dividirlos por 10.\n",
    "\n",
    "Hacer nuevamente un acer un grafico de cajas para si quedaron outliers en esta columna. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-12-717d988542d0>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df[\"age\"][elder.index]=elder.values\n",
      "C:\\Users\\urkni\\anaconda3\\lib\\site-packages\\pandas\\core\\series.py:1092: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._set_labels(key, value)\n",
      "C:\\Users\\urkni\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3343: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    }
   ],
   "source": [
    "#tomamos los valores >100 de \"age\", los asignamos a una variable y con el index y los values los reingresamos divididos por 10\n",
    "\n",
    "elder=df[df[\"age\"]>100][\"age\"]/10\n",
    "df[\"age\"][elder.index]=elder.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xa5ced00>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=\"age\",data=df,orient=\"v\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Varianza de las features\n",
    "\n",
    "Veamos la columna 'lives', cuanto valores distintos tiene?\n",
    "\n",
    "En base a este analisis, tiene sentido que este incluida para hace la prediccion?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "yes    1338\n",
       "Name: lives, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#al ser todos los lives iguales, la descartamos para predicciÃ³n\n",
    "\n",
    "df[\"lives\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\urkni\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3990: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n"
     ]
    }
   ],
   "source": [
    "df.drop(labels=\"lives\", axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18.0</td>\n",
       "      <td>15.960</td>\n",
       "      <td>0.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>1694.79640</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21.0</td>\n",
       "      <td>16.815</td>\n",
       "      <td>1.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>3167.45585</td>\n",
       "      <td>Female</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>16.815</td>\n",
       "      <td>2.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>6640.54485</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26.0</td>\n",
       "      <td>17.195</td>\n",
       "      <td>2.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>Female</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28.0</td>\n",
       "      <td>17.290</td>\n",
       "      <td>0.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>3732.62510</td>\n",
       "      <td>Female</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>46.0</td>\n",
       "      <td>48.070</td>\n",
       "      <td>2.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>9432.92530</td>\n",
       "      <td>Female</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>58.0</td>\n",
       "      <td>49.060</td>\n",
       "      <td>0.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>11381.32540</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>23.0</td>\n",
       "      <td>50.380</td>\n",
       "      <td>1.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>2438.05520</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>22.0</td>\n",
       "      <td>52.580</td>\n",
       "      <td>1.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>44501.39820</td>\n",
       "      <td>Male</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>18.0</td>\n",
       "      <td>53.130</td>\n",
       "      <td>0.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1163.46270</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows Ã 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age     bmi  children     region      charges     sex smoker\n",
       "0     18.0  15.960       0.0  northeast   1694.79640    Male     no\n",
       "1     21.0  16.815       1.0  northeast   3167.45585  Female     no\n",
       "2     38.0  16.815       2.0  northeast   6640.54485    Male     no\n",
       "3     26.0  17.195       2.0  northeast  14455.64405  Female    yes\n",
       "4     28.0  17.290       0.0  northeast   3732.62510  Female     no\n",
       "...    ...     ...       ...        ...          ...     ...    ...\n",
       "1333  46.0  48.070       2.0  northeast   9432.92530  Female     no\n",
       "1334  58.0  49.060       0.0  southeast  11381.32540    Male     no\n",
       "1335  23.0  50.380       1.0  southeast   2438.05520    Male     no\n",
       "1336  22.0  52.580       1.0  southeast  44501.39820    Male    yes\n",
       "1337  18.0  53.130       0.0  southeast   1163.46270    Male     no\n",
       "\n",
       "[1338 rows x 7 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ingenieria de features\n",
    "\n",
    "Vamos a convertir las variables categoricas a numericas.\n",
    "\n",
    "Veamos cuantos valores distintos hay en las columnas y en base a eso tomaremos la decision de que columnas transformar (ej: si una columna tiene 100 valores distintos, no haremos un get_dummies sobre ella)\n",
    "\n",
    "Determinar si son variables nominales u ordinales y en base a eso usar el metodo get_dummies o LabelEncoder\n",
    "\n",
    "**No olvidarse de eliminar las columnas originales luego de la transformacion**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "col_cat=df.select_dtypes(\"object\").columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>charges</th>\n",
       "      <th>region_northwest</th>\n",
       "      <th>region_southeast</th>\n",
       "      <th>region_southwest</th>\n",
       "      <th>sex_Male</th>\n",
       "      <th>smoker_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>18.0</td>\n",
       "      <td>15.960</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1694.79640</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>428</th>\n",
       "      <td>21.0</td>\n",
       "      <td>16.815</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3167.45585</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1226</th>\n",
       "      <td>38.0</td>\n",
       "      <td>16.815</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6640.54485</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>26.0</td>\n",
       "      <td>17.195</td>\n",
       "      <td>2.0</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1286</th>\n",
       "      <td>28.0</td>\n",
       "      <td>17.290</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3732.62510</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286</th>\n",
       "      <td>46.0</td>\n",
       "      <td>48.070</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9432.92530</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>58.0</td>\n",
       "      <td>49.060</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11381.32540</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>847</th>\n",
       "      <td>23.0</td>\n",
       "      <td>50.380</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2438.05520</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1047</th>\n",
       "      <td>22.0</td>\n",
       "      <td>52.580</td>\n",
       "      <td>1.0</td>\n",
       "      <td>44501.39820</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1317</th>\n",
       "      <td>18.0</td>\n",
       "      <td>53.130</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1163.46270</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows Ã 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age     bmi  children      charges  region_northwest  region_southeast  \\\n",
       "172   18.0  15.960       0.0   1694.79640                 0                 0   \n",
       "428   21.0  16.815       1.0   3167.45585                 0                 0   \n",
       "1226  38.0  16.815       2.0   6640.54485                 0                 0   \n",
       "412   26.0  17.195       2.0  14455.64405                 0                 0   \n",
       "1286  28.0  17.290       0.0   3732.62510                 0                 0   \n",
       "...    ...     ...       ...          ...               ...               ...   \n",
       "286   46.0  48.070       2.0   9432.92530                 0                 0   \n",
       "116   58.0  49.060       0.0  11381.32540                 0                 1   \n",
       "847   23.0  50.380       1.0   2438.05520                 0                 1   \n",
       "1047  22.0  52.580       1.0  44501.39820                 0                 1   \n",
       "1317  18.0  53.130       0.0   1163.46270                 0                 1   \n",
       "\n",
       "      region_southwest  sex_Male  smoker_yes  \n",
       "172                  0         1           0  \n",
       "428                  0         0           0  \n",
       "1226                 0         1           0  \n",
       "412                  0         0           1  \n",
       "1286                 0         0           0  \n",
       "...                ...       ...         ...  \n",
       "286                  0         0           0  \n",
       "116                  0         1           0  \n",
       "847                  0         1           0  \n",
       "1047                 0         1           1  \n",
       "1317                 0         1           0  \n",
       "\n",
       "[1338 rows x 9 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dummies=pd.concat([df,pd.get_dummies(df[col_cat],drop_first=True)],axis=1).copy()\n",
    "df_dummies.drop(['region', 'sex', 'smoker'],axis=1,inplace=True)\n",
    "df_dummies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Seleccionamos las features que van a usarse para entrenar el modelo\n",
    "\n",
    "Vamos a eliminar todas aquellas columnas que por los analisis previos consideremos que no influyen en la prediccion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0037504259049803757"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dummies[\"smoker_yes\"].corr(df_dummies[\"bmi\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.01275890082067377"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dummies[\"children\"].corr(df_dummies[\"bmi\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0037504259049803675"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dummies[\"bmi\"].corr(df_dummies[\"smoker_yes\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tenemos un solo duplicado, de todos modos lo vamos a sacar de nuestro df, suponemos es un error... y no cambia mucho igual\n",
    "\n",
    "df[df_dummies.duplicated()]\n",
    "df_dummies.drop(index=195,axis=0,inplace=True)\n",
    "df_dummies.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x9d42700>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#dos indicaciones a tener en cuenta: el fuamdor positivo y la regiÃ³n SE son los mÃ¡s correlacionados con el precio que se cobra.\n",
    "\n",
    "sns.heatmap(df_dummies.corr(),cmap=\"YlGnBu\",annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xb37cbb0>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#por aquÃ­, todo tranquilo\n",
    "\n",
    "df_num=df[[\"age\",\"bmi\",\"children\",\"charges\"]].copy()\n",
    "sns.heatmap(df_num.corr(),cmap=\"YlGnBu\",annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>847</th>\n",
       "      <td>23.0</td>\n",
       "      <td>50.38</td>\n",
       "      <td>1.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>2438.0552</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1047</th>\n",
       "      <td>22.0</td>\n",
       "      <td>52.58</td>\n",
       "      <td>1.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>44501.3982</td>\n",
       "      <td>Male</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1317</th>\n",
       "      <td>18.0</td>\n",
       "      <td>53.13</td>\n",
       "      <td>0.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1163.4627</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       age    bmi  children     region     charges   sex smoker\n",
       "847   23.0  50.38       1.0  southeast   2438.0552  Male     no\n",
       "1047  22.0  52.58       1.0  southeast  44501.3982  Male    yes\n",
       "1317  18.0  53.13       0.0  southeast   1163.4627  Male     no"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAEGCAYAAABbzE8LAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAL20lEQVR4nO3dfYhl913H8c83OwtNW4vNpoa6URcd0D+K1BKKpSBFUtnE4hMqLWhXkFQb3az1D58IWKVIKSq2+0cgPuCs9YHSWmzLdjVBxQeKultrU7uFHWVrs8YknaBtSFq72Z9/7J067s6d3Znc3e8Z83rBMnfOOffcLz9m3jlzNnO3xhgB4Pq7oXsAgOcqAQZoIsAATQQYoIkAAzRZ2s7BN9988zhw4MA1GgXg/6dTp059dozxkku3byvABw4cyMmTJxc3FcBzQFV9erPtbkEANBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQZFv/JhzTcfTo0ayurrbOcO7cuSTJ/v37W+dYt7y8nMOHD3ePAVdNgHep1dXVfOwTp/PM829qm2HPU/+VJPmPL/Z/Ge156onuEWDb+r9z2LFnnn9Tnv6mO9te/8ZPHU+S1hnWrc8Cu4l7wABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATa5LgI8ePZqjR49ej5cCmvl+v3pL1+NFVldXr8fLABPg+/3quQUB0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQAD19za2lre/OY356677spdd92Vu+++O2tra1lbW8s999yTtbW1uc/bav9Oj93OeRZ13s0IMHDNrays5PTp0zlz5kzOnDmTT37ykzl27FhWVlby0EMP5dixY3Oft9X+nR67nfMs6rybEWDgmlpbW8uHP/zhy7YfP348J06cyBgjJ06cuOwKc21tbcv9Oz32SrNuPM/q6upCzjvP0kLPNse5c+fy9NNP58iRI9fj5Z4TVldXc8N/j+4xJuOGL3wuq6uf9zU2Aaurq7nxxhu//PnKykrOnz9/2XFf+tKXUlVJkmeeeSbHjh3LW97ylv/zvAsXLszdv9F2jt3Kped529vetpDzznPFK+CqelNVnayqk48//vjCXhh4bnjwwQczxuYXC+vbz58/nwceeOCy562He7P9Oz32SrNuPM/Zs2cXct55rngFPMa4P8n9SXLbbbft6JJr//79SZJ3vvOdO3k6mzhy5EhO/euj3WNMxoXnvSjLX3+Lr7EJuPSnkNtvvz0f/OAHN41wVWWMkaWlpbz2ta+97HnHjx/P+fPnN92/02O3cul5br311jz88MPP+rzzuAcMXFOHDh3K0tLl13p79+7N3r17kyR79uzJG9/4xsued8MNN8zdv9NjrzTrxvPce++9CznvPAIMXFP79u3LHXfccdn2O++8MwcPHkxV5eDBg9m3b99lz9tq/06PvdKsG8+zvLy8kPPOc13+Eg54bjt06FDOnDnz5fupe/fu/fLV5NmzZ+deWR46dGjL/Ts9djvnWdR5NyPAwDW3b9++3HfffZvue9e73rXl87bav9Njt3OeRZ13M25BADQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaLJ0PV5keXn5erwMMAG+36/edQnw4cOHr8fLABPg+/3quQUB0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCZL3QOwc3ueeiI3fup44+uvJUnrDOv2PPVEklu6x4BtEeBdanl5uXuEnDt3Pkmyf/8UwnfLJNYEtkOAd6nDhw93jwA8S+4BAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZrUGOPqD656PMmn5+y+OclnFzHUNWTGxTDjYphxMXbDjF83xnjJpRu3FeCtVNXJMcZtCznZNWLGxTDjYphxMXbDjPO4BQHQRIABmiwywPcv8FzXihkXw4yLYcbF2A0zbmph94AB2B63IACaCDBAkx0FuKp+p6oeq6pPbNj21qo6V1Ufm/25c3Fjbnu+r6mqv6iq01X1z1V1ZLb9pqp6oKrOzD6+eIIzTmkdn1dVf19V/zSb8Zdm26e0jvNmnMw6bph1T1X9Y1V9aPb5ZNZxixkntY5VdbaqHprNcnK2bXLreLV2dA+4qr4tyZNJjo0xXjbb9tYkT44xfnWhE+5AVb00yUvHGB+tqq9IcirJ9yT5kSRPjDHeXlU/l+TFY4yfndiMP5jprGMlecEY48mq2pvkb5IcSfJ9mc46zpvxYCayjuuq6qeT3JbkRWOM11XVOzKRddxixrdmQutYVWeT3DbG+OyGbZNbx6u1oyvgMcZfJXliwbMszBjjkTHGR2ePP5/kdJL9Sb47ycrssJVcDF6LLWacjHHRk7NP987+jExrHefNOClVdWuS70zyWxs2T2Ydk7kz7gaTWsftWPQ94J+sqo/PblFM4seAqjqQ5FuS/F2SW8YYjyQXA5jkq/om+1+XzJhMaB1nP5J+LMljSR4YY0xuHefMmExoHZP8RpKfSXJhw7ZJrWM2nzGZ1jqOJH9WVaeq6k2zbVNbx6u2yADfl+Qbkrw8ySNJfm2B596Rqnphkvcl+akxxue659nMJjNOah3HGM+MMV6e5NYkr6yql3XOs5k5M05mHavqdUkeG2Oc6prhSraYcTLrOPPqMcYrktyR5Cdmt0N3rYUFeIzx6Owb4UKS30zyykWdeydm9wPfl+T3xxh/PNv86Oze6/o92Me65pvNcNmMU1vHdWOM/0zyl7l4b3VS67hu44wTW8dXJ/mu2f3LP0ry7VX17kxrHTedcWLrmDHGv88+Ppbk/bN5prSO27KwAK8vwMz3JvnEvGOvtdlfzPx2ktNjjF/fsOsDSQ7NHh9K8ifXe7Z182ac2Dq+pKq+cvb4xiS3J/lUprWOm844pXUcY/z8GOPWMcaBJK9P8udjjB/KhNZx3oxTWseqesHsL6xTVS9I8h2zeSazjtu1tJMnVdUfJnlNkpur6uEkv5jkNVX18ly8R3M2yY8taMadeHWSH07y0OzeYJL8QpK3J3lPVf1okn9L8gNN8yXzZ3zDhNbxpUlWqmpPLv7H+j1jjA9V1UcynXWcN+PvTWgd55nS1+M875jQOt6S5P0Xr12ylOQPxhgnquofMv113JRfRQZo4jfhAJoIMEATAQZoIsAATQQYoIkAsytU1YHa8O5723zuV1fVexc9EzxbO/r/gGE3mf321Pd3zwGXcgXMbrJUVSuzN4Z5b1U9f/b+sL9SVR+pqpNV9Yqq+tOq+peq+vHk2V09w7UkwOwm35jk/jHGNyf5XJK7Z9s/M8Z4VZK/TvK7uXi1+61JfrljSLhabkGwm3xmjPG3s8fvTnLP7PEHZh8fSvLC2fsrf76qvrD+PhEwRa6A2U0u/b359c+/OPt4YcPj9c9dZDBZAsxu8rVV9arZ4zfk4j8/BLuWALObnE5yqKo+nuSmXHyzcNi1vBsaQBNXwABNBBigiQADNBFggCYCDNBEgAGaCDBAk/8BWWlLmhWtQ3wAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# tras averiguaciones, bmi>50 se considera super obesidad, no es un patrÃ³n tan exagerado, no parecen haber outliers allÃ­\n",
    "\n",
    "sns.boxplot(x=\"bmi\", data=df)\n",
    "df[df[\"bmi\"]>50]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dividimos el dataframe\n",
    "\n",
    "Vamos a dividirlo en un 80% train y 20% test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hacemos la divisiÃ³n del data set con 20%-80% de manera randomizada\n",
    "#En un futuro, para mayor seguridad y chequeo de nuestro modelo de test y train, deberÃ­amos tomar distintas porciones\n",
    "#del df y volver a correrlo, por ejemplo, cambiando 5 veces el 20% usado para cada test hasta completar el 100% y calcular las \n",
    "#medias de todos los resultados por vuelta (k fold cross validation)\n",
    "\n",
    "X_train,X_test,y_train,y_test=train_test_split(df_dummies.drop([\"charges\"],axis=1),df_dummies[\"charges\"],test_size=0.20,random_state=25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Entrenamos el modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr=LinearRegression()\n",
    "lr.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "pre_train=lr.predict(X_train)\n",
    "pre_test=lr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  259.51791712,   350.03590971,   593.74104487,  -457.12519872,\n",
       "        -977.72829212,  -892.95757852,  -211.70551705, 23584.43791144])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#vemos que la mayor paridad entre aunmento de X e y es por la anteÃºltima variable, \"sex Male\". Le sigue \"age\". Curioso.\n",
    "\n",
    "lr.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-12366.427272293564"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7504152368292972"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(df_dummies.drop([\"charges\"],axis=1),df_dummies[\"charges\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "#### Evaluamos el modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# hagamos la evaluacion tanto para el train como para el test dataset\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from math import sqrt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6160.59936327354\n",
      "5575.66989670731\n"
     ]
    }
   ],
   "source": [
    "train_mse=mean_squared_error(y_train,pre_train)\n",
    "test_mse=mean_squared_error(y_test,pre_test)\n",
    "train_rmse=sqrt(train_mse)\n",
    "test_rmse=sqrt(test_mse)\n",
    "\n",
    "print(train_rmse)\n",
    "print(test_rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Compactamos el modelo\n",
    "\n",
    "Creamos las funciones que creamos correspondientes para realizar las operaciones desde que se carga el df hasta que se entrena el modelo (pueden basarse en la estructura vista en clases)\n",
    "\n",
    "Luego correrlas en la misma celda y verificar los resultados.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "datos = pd.read_csv(\"seguro_medico.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transformacion(datos):\n",
    "    '''\n",
    "    Operaciones que afecten los valores del df, como relleno de nulos, eliminar filas, mapeos, reemplazo de valores, etc\n",
    "    '''\n",
    "    #adios a los nulos\n",
    "    datos=datos.iloc[:1338]\n",
    "    \n",
    "    #limpieza valores smoker y sex\n",
    "    sex=datos.loc[:,\"sex\"].copy()\n",
    "    sex=sex.str.title()\n",
    "    smoker=datos.loc[:,\"smoker\"].copy()\n",
    "    smoker[smoker==\"si\"]=\"yes\"\n",
    "    datos.drop(labels=[\"sex\",\"smoker\"], axis=1, inplace=True)\n",
    "    datos[\"sex\"]=sex\n",
    "    datos[\"smoker\"]=smoker\n",
    "    \n",
    "    #ordeno por bmi (se me hizo bonito, mas resultÃ³ innecesario, ademÃ¡s despuÃ©s randomizÃ¡s...), elimino outliers en \"age\"\n",
    "    #y reseteo indices despuÃ©s de estas modificaciones\n",
    "    datos.sort_values(by=[\"bmi\"], inplace=True)\n",
    "    elder=datos[df[\"age\"]>100][\"age\"]/10\n",
    "    datos[\"age\"][elder.index]=elder.values\n",
    "    datos.reset_index(drop=True)\n",
    "    \n",
    "    #elimino \"lives\" por irrelevante\n",
    "    datos.drop(labels=\"lives\", axis=1, inplace=True)\n",
    "    \n",
    "    #creo mis dummies para tratar categÃ³ricos\n",
    "    col_cat=datos.select_dtypes(\"object\").columns\n",
    "    df_dummies=pd.concat([datos,pd.get_dummies(datos[col_cat],drop_first=True)],axis=1).copy()\n",
    "    df_dummies.drop(['region', 'sex', 'smoker'],axis=1,inplace=True)\n",
    "    \n",
    "    return datos\n",
    "\n",
    "def entrenar_testear(datos):\n",
    "    '''\n",
    "    Instanciar el modelo, entrenarlo y luego evaluarlo\n",
    "    '''\n",
    "    lr = LinearRegression()\n",
    "    \n",
    "    #20%test, 80% train, se podrÃ­a poner una variable n random para el random_state, asÃ­ cambia cada vez\n",
    "    X_train,X_test,y_train,y_test=train_test_split(df_dummies.drop([\"charges\"],axis=1),df_dummies[\"charges\"],test_size=0.20,random_state=25)\n",
    "    \n",
    "    lr.fit(X_train,y_train)\n",
    "    \n",
    "    train_predictions = lr.predict(X_train)\n",
    "    test_predictions = lr.predict(X_test)\n",
    "    \n",
    "    train_rmse_2 = np.sqrt(mean_squared_error(train_predictions, y_train))\n",
    "    test_rmse_2 = np.sqrt(mean_squared_error(test_predictions, y_test))\n",
    "    \n",
    "    print(f\"El error de train es {train_rmse_2}\")\n",
    "    print(f\"El error de test es {test_rmse_2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\urkni\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3990: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "<ipython-input-37-a1ef7530f7ea>:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  datos[\"sex\"]=sex\n",
      "<ipython-input-37-a1ef7530f7ea>:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  datos[\"smoker\"]=smoker\n",
      "<ipython-input-37-a1ef7530f7ea>:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  datos.sort_values(by=[\"bmi\"], inplace=True)\n",
      "<ipython-input-37-a1ef7530f7ea>:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  datos[\"age\"][elder.index]=elder.values\n",
      "C:\\Users\\urkni\\anaconda3\\lib\\site-packages\\pandas\\core\\series.py:1092: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._set_labels(key, value)\n",
      "<ipython-input-38-3ea54cd47948>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data_transformada = transformacion(datos)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>18.0</td>\n",
       "      <td>15.960</td>\n",
       "      <td>0.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>1694.79640</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>428</th>\n",
       "      <td>21.0</td>\n",
       "      <td>16.815</td>\n",
       "      <td>1.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>3167.45585</td>\n",
       "      <td>Female</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1226</th>\n",
       "      <td>38.0</td>\n",
       "      <td>16.815</td>\n",
       "      <td>2.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>6640.54485</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>26.0</td>\n",
       "      <td>17.195</td>\n",
       "      <td>2.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>14455.64405</td>\n",
       "      <td>Female</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1286</th>\n",
       "      <td>28.0</td>\n",
       "      <td>17.290</td>\n",
       "      <td>0.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>3732.62510</td>\n",
       "      <td>Female</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286</th>\n",
       "      <td>46.0</td>\n",
       "      <td>48.070</td>\n",
       "      <td>2.0</td>\n",
       "      <td>northeast</td>\n",
       "      <td>9432.92530</td>\n",
       "      <td>Female</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>58.0</td>\n",
       "      <td>49.060</td>\n",
       "      <td>0.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>11381.32540</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>847</th>\n",
       "      <td>23.0</td>\n",
       "      <td>50.380</td>\n",
       "      <td>1.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>2438.05520</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1047</th>\n",
       "      <td>22.0</td>\n",
       "      <td>52.580</td>\n",
       "      <td>1.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>44501.39820</td>\n",
       "      <td>Male</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1317</th>\n",
       "      <td>18.0</td>\n",
       "      <td>53.130</td>\n",
       "      <td>0.0</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1163.46270</td>\n",
       "      <td>Male</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows Ã 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age     bmi  children     region      charges     sex smoker\n",
       "172   18.0  15.960       0.0  northeast   1694.79640    Male     no\n",
       "428   21.0  16.815       1.0  northeast   3167.45585  Female     no\n",
       "1226  38.0  16.815       2.0  northeast   6640.54485    Male     no\n",
       "412   26.0  17.195       2.0  northeast  14455.64405  Female    yes\n",
       "1286  28.0  17.290       0.0  northeast   3732.62510  Female     no\n",
       "...    ...     ...       ...        ...          ...     ...    ...\n",
       "286   46.0  48.070       2.0  northeast   9432.92530  Female     no\n",
       "116   58.0  49.060       0.0  southeast  11381.32540    Male     no\n",
       "847   23.0  50.380       1.0  southeast   2438.05520    Male     no\n",
       "1047  22.0  52.580       1.0  southeast  44501.39820    Male    yes\n",
       "1317  18.0  53.130       0.0  southeast   1163.46270    Male     no\n",
       "\n",
       "[1338 rows x 7 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#a probarla!\n",
    "\n",
    "data_transformada = transformacion(datos)\n",
    "data_transformada"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El error de train es 6160.59936327354\n",
      "El error de test es 5575.66989670731\n"
     ]
    }
   ],
   "source": [
    "entrenar_testear(data_transformada)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Me quedaron en el tintero: quisiera haber podido salvar los SettingWithCopy, he intentado muchas veces para salvarlo, pero no pude hacerlo correctamente. AdemÃ¡s, tambiÃ©n creo que si no entendÃ­ mal, el coeficiente de la regresiÃ³n lineal mÃºltiple al dar bajo, refleja por tanto aumentos mÃ¡s emparejados entre el precio y dos variables en particular: Sex y Age... Si no entiendo mal, tal vez armando el modelo sÃ³lo con esas dos variables puede ajustarse mucho mÃ¡s! A seguir practicando y leyendo. Justo el fin de aÃ±o se pone bravo para poder dedicarle todo el tiempo que me hubiera gustado. Si alguna bibliografÃ­a .pdf conseguible me pudieras sugerir para afianzar y profundizar, IvÃ¡n, te agradecerÃ­a mucho! O algÃºn canal o pÃ¡ginas, aparte de las que ya vimos en una de las clases que nos pasaste (en la de Regex, creo?). Saludos y muchas gracias por todo el contenido y clases que me re sirvieron!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## A PRACTICAR y leer..\n",
    "\n",
    "Este simple ejercicio es solo para aprobar el curso, hay muchas muchas cosas mas sobre regresion lineal muy utiles en problemas reales.\n",
    "\n",
    "Estos son algunos ejemplos de temas utiles sobre regresion lineal  y ML en gral:\n",
    "\n",
    "    linear regression assumptions\n",
    "\n",
    "    overfitting y underfitting\n",
    "    \n",
    "    bias y variance\n",
    "    \n",
    "    metrics: MAE, R squared\n",
    "    \n",
    "    scaling the data, normalization, standarization\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ivan Pasquevich"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Suban este notebook resuelto al drive con la nomenclatura nombre_apellido_TP_8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
